<?php
namespace App\Controller\Component;

use Cake\Controller\Component;
use Cake\Controller\ComponentRegistry;
use Cake\Datasource\ConnectionManager;

/**
 * Utils component
 */
class UtilsComponent extends Component
{

    /**
     * Default configuration.
     *
     * @var array
     */
    protected $_defaultConfig = [];

    /**
     * @param array $config
     */
    public function initialize(array $config)
    {
        $this->_defaultConfig = $config['configuration'];
        parent::initialize($config); // TODO: Change the autogenerated stub
    }


    /**
     * find all items expirying from the stock
     * @param int $company_id
     * @param bool $details
     * @return bool
     */
    public function findExpiry($company_id = 0,$details = true){
        $expiryList = null;
        $expiryInDays = isset($this->_defaultConfig['expiry_notification']) ? $this->_defaultConfig['expiry_notification'] : EXPIRY_THRESHOLD;
        if($details):
            $expiryDrugList = ConnectionManager::get('default')->execute("
                                    SELECT DATEDIFF(expiration_date,now()) as eDays,categories.name as cName,count(*) as counts, items.id as itemID,items.cost_price,quantity
                                     FROM items INNER JOIN categories ON category_id = categories.id WHERE (DATEDIFF(expiration_date,now()) <= :date AND DATEDIFF(expiration_date,now()) > 0) AND items.company_id = :cID AND expired = 0 and quantity > 0
                                     group by eDays HAVING count(*) > 0  LIMIT 10",['date'=>$expiryInDays,'cID'=>$company_id])->fetchAll('assoc');
        else:
            $expiryDrugList =  ConnectionManager::get('default')->execute("
                                    SELECT items.id ,DATEDIFF(expiration_date,now()) as eDays,categories.name as cName,
                                    items.name as iName, items.id as itemID,items.cost_price,quantity
                                     FROM items INNER JOIN categories ON category_id = categories.id WHERE (DATEDIFF(expiration_date,now()) <= :date AND DATEDIFF(expiration_date,now()) > 0) AND items.company_id = :cID AND expired = 0 and quantity > 0
                                      ",['date'=>$expiryInDays,'cID'=>$company_id])->fetchAll('assoc');
        endif;
        $this->setItemAsExpired($expiryDrugList,$company_id);
        return !empty($expiryDrugList) ? $expiryDrugList : false;
    }

    /**
     * set item as expired
     * @param mixed $data
     * @param int $company_id
     */
    public function setItemAsExpired($data,$company_id){

        // debug($this->Auth->user('location_id'));
        for ($i = 0;$i<count($data);$i++){
            if($data[$i]['eDays'] === 0):
                ConnectionManager::get('default')->execute("UPDATE items SET expired = 1 WHERE items.id = ? AND expired != true",[$data[$i]['itemID']]);
                $this->setExpiredAsExpenses($data[$i]['itemID'],$data[$i]['cost_price']);
            endif;
        }
    }

    /**
     * add expired items to expenses or losses to the company
     * @param $item
     * @param $cost
     */
    public function setExpiredAsExpenses($item,$cost){
        ConnectionManager::get('default')->execute("INSERT INTO expenses (expenditure_statement,amount,location_id,type,created) VALUES (?,?,?,?,now())",
            ["Item with this no: ".$item." Expired ",$cost,$_SESSION['Auth']['User']['location_id'],'PURCHASE']);
    }

    /**
     * get upcoming bdays of customers in the database
     * @return mixed
     */
    public function findCustomersBirthdays(){

        return ConnectionManager::get('default')->execute("SELECT * FROM customers WHERE company_id = :company AND dob + INTERVAL EXTRACT(YEAR FROM now()) - EXTRACT(YEAR FROM dob) YEAR BETWEEN CURRENT_DATE() AND CURRENT_DATE() + INTERVAL 7 DAY",['company'=>$_SESSION['Auth']['User']['company_id']])->fetchAll('assoc');
    }

    /**
     * find all purchase orders that should be collected by the customers so you notify them.
     * @return mixed
     */
    public function findPoExpirying(){
        $notifyInDays = isset($this->_defaultConfig['po_collection_notification']) ? $this->_defaultConfig['po_collection_notification'] : PO_THRESHOLD;
        return  ConnectionManager::get('default')->execute("SELECT  (DATEDIFF(expected_date, now())) AS `eDays`,CONCAT(customers.first_name,' ',customers.last_name) as customer,items.name as name,amount_received,status,payment_status,expected_date FROM 
  purchase_orders PurchaseOrders INNER JOIN customers  ON customers.id = PurchaseOrders.customer_id INNER JOIN items ON items.id = PurchaseOrders.item_id WHERE (DATEDIFF(expected_date, now()) <= :days AND DATEDIFF(expected_date, now()) > '0') AND collection_status = 0 ORDER BY eDays DESC LIMIT 10",['days'=>$notifyInDays])->fetchAll('assoc');
    }

    /**
     * get all the suppliers that should be paid within the next few days and alert the admin
     * @return mixed
     */
    public function findSupplierPaymentNotification(){
        $notifyInDays = isset($this->_defaultConfig['supplier_payment_notification']) ? $this->_defaultConfig['supplier_payment_notification'] : SUPPLIER_PAYMENT_THRESHOLD;
        return  ConnectionManager::get('default')->execute("SELECT  (DATEDIFF(due_date, now())) AS `eDays`,amount_owed-amount as amount,due_date,suppliers.company_name FROM 
  supplier_payments INNER JOIN suppliers  ON suppliers.id = supplier_id  WHERE (DATEDIFF(due_date, now()) <= :days AND DATEDIFF(due_date, now()) > '0') AND completed = 0 AND supplier_payments.location_id = :lID ORDER BY eDays DESC LIMIT 5",['days'=>$notifyInDays,'lID'=>$_SESSION['Auth']['User']['location_id']])->fetchAll('assoc');
    }

    /**
     * Get a summary of sale in the company for the year grouped by month
     * @param $year
     * @return mixed
     */
    public function findSaleSummary($year){
        return ConnectionManager::get('default')->execute("SELECT sum(cost) as cost,extract(month from created) as m FROM `sales` where extract(year from created) = :year group by extract(month from created)",['year'=>$year])->fetchAll('assoc');

    }
    /**
    *Get the sales details for the month
    *@param $date date the month and year for which you want to see report
    *@param $cumulative get a total for the month
    *@return mixed array 
    */
    public function findMonthlySaleSummary($date,$cumulative = false){
        $date_data = explode('-',$date);
        if($cumulative){
            return ConnectionManager::get('default')->execute("SELECT sum(cost) as cost FROM `sales` where extract(month from created) = ? and extract(year from created)  = ? and company_id = ? ",[$date_data[1],$date_data[0],$_SESSION['Auth']['User']['company_id']])->fetch('assoc');
        }else{


        return ConnectionManager::get('default')->execute("SELECT sum(cost) as cost, created FROM `sales` where extract(month from created) = ? and extract(year from created)  = ? and company_id = ? group by date(created)",[$date_data[1],$date_data[0],$_SESSION['Auth']['User']['company_id']])->fetchAll('assoc');
        }
    }
    
    /**
    *Get the sales profit details for the month
    *@param $date date the month and year for which you want to see report
    *@param $cumulative get a total for the month
    *@return mixed array 
    */
    public function findMonthlyProfitSummary($date,$cumulative = false){
        $date_data = explode('-',$date);
        if($cumulative){
            return ConnectionManager::get('default')->execute("SELECT sum(retail_sp - cost_price) as cost FROM `sales` INNER JOIN items ON items.id = item_id where extract(month from Sales.created) = ? and extract(year from Sales.created)  = ? and Sales.company_id = ?  ",[$date_data[1],$date_data[0],$_SESSION['Auth']['User']['company_id']])->fetch('assoc');
        }else{


        return ConnectionManager::get('default')->execute("SELECT sum(retail_sp - cost_price) as cost , Sales.created FROM `sales` INNER JOIN items ON items.id = item_id  where extract(month from Sales.created) = ? and extract(year from Sales.created)  = ? and Sales.company_id = ? group by Sales.created",[$date_data[1],$date_data[0],$_SESSION['Auth']['User']['company_id']])->fetchAll('assoc');
        }
    }

    /**
     * get the summary of amount invested in business for a year as this will be compared to income generated to determine
     * loss or profit.
     * @param $year
     * @return mixed
     */
    public function findInvestedSummary($year,$month = false){
        $invested = [];
        
         $data = ConnectionManager::get('default')->execute("SELECT sum(amount) as sp,extract(month from created) as m FROM `expenses` where extract(year from created) = 2018 AND type = 'PURCHASE' group by m",['year'=>$year])->fetchAll('assoc');
        
         return ($data);
    }

    /**
     * Find the total amount made from purchase orders as this accounts for income generated too
     * @param string $year year for which you want to get the report
     * @param int $status get report for either completed or incompleted dealy
     * @return mixed
     */
    public function findPOSummary($year,$status = 1){
        switch ($status){
            case 0:
                return ConnectionManager::get('default')->execute("SELECT (expected_amount - amount_received) as amount,extract(month from created) as m FROM `purchase_orders` where extract(year from created) = :year and status = :status group by extract(month from created)",['status'=>$status,'year'=>$year])->fetchAll('assoc');
            case 1:
                return ConnectionManager::get('default')->execute("SELECT sum(amount_received) as amount,extract(month from created) as m FROM `purchase_orders` where extract(year from created) = :year and status = :status group by extract(month from created)",['status'=>$status,'year'=>$year])->fetchAll('assoc');
                case 2:
                return ConnectionManager::get('default')->execute("SELECT amount_received as amount,extract(month from created) as m FROM `purchase_orders` where extract(year from created) = :year and status = :status group by extract(month from created)",['status'=>$status,'year'=>$year])->fetchAll('assoc');
            default:
                return null;
        }

    }
    public function getSupplierPaymentDetail($fromDate,$toDate,$percentage,$allSupplier = true,$suppliers = []){
        //debug($suppliers);
        
        
        if($allSupplier){
            return ConnectionManager::get('default')->execute("SELECT suppliers.company_name as company,items.name as product,sales.quantity as qty,cost,(sales.cost * ?/100) as profit FROM `items` INNER JOIN suppliers ON suppliers.id = supplier_id INNER JOIN sales ON sales.item_id = items.id where sales.created BETWEEN ? AND ? ",[$percentage,$fromDate,$toDate])->fetchAll('assoc');
        }else{

            return ConnectionManager::get('default')->execute("SELECT suppliers.company_name as company,items.name as product,sales.quantity as qty,cost,(sales.cost * ?/100) as profit FROM `items` INNER JOIN suppliers ON suppliers.id = supplier_id INNER JOIN sales ON sales.item_id = items.id where sales.created BETWEEN ? AND ? and supplier_id IN (".implode(",",$suppliers).")",[$percentage,$fromDate,$toDate])->fetchAll('assoc');
        }
        

    }

}

